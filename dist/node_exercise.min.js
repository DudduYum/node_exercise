/*! node_exercise 20-12-2018 */

"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var n=0;n<e.length;n++){var s=e[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function _createClass(t,e,n){return e&&_defineProperties(t.prototype,e),n&&_defineProperties(t,n),t}var MathDS=require("math-ds"),Plane=function(){function t(){_classCallCheck(this,t),this.initData()}return _createClass(t,[{key:"initData",value:function(){this.points=[],this.quantity=[],this.lines=[]}},{key:"deleteAll",value:function(){this.initData()}},{key:"getPoint",value:function(t){if(!this.points[t])throw new Error("missing point");return this.points[t]}},{key:"getPoints",value:function(){for(var t=[],e=0;e<this.points.length;e++)t.push({x:this.points[e].x,y:this.points[e].y,quantity:this.quantity[e]});return t}},{key:"getLinesWithPoints",value:function(e){var n=this;return this.lines.filter(function(t){return e===t.pool.reduce(function(t,e){return t+=n.quantity[e]},0)}).map(function(t){return t.pool.map(function(t){return n.points[t]})})}},{key:"test",value:function(){console.log("points",this.points),console.log("lines",this.lines)}},{key:"addPoint",value:function(t,e){for(var n=new MathDS.Vector2(t,e),s=!1,o=0;o<this.points.length;o++)n.equals(this.points[o])&&(s=!0,this.quantity[o]++);if(!s){this.quantity.push(1);var a=this.points.push(n)-1,r=this.lines.filter(function(t){return t.addPoint(a)}).reduce(function(e,t){return t.pool.map(function(t){e[t]=!0}),e},{});for(o=0;o<this.points.length;o++)o===a||r[o]||this.lines.push(new Line(this,a,o))}}}]),t}(),Line=function(){function s(t,e,n){_classCallCheck(this,s),this.plane=t,this.center=this.plane.getPoint(e),this.vertex=this.plane.getPoint(n),this.distanceV=(new MathDS.Vector2).subVectors(this.vertex,this.center).normalize(),this.pool=[e,n]}return _createClass(s,[{key:"addPoint",value:function(t){var e=this.isOnTheSameAxis(t);return e&&this.pool.push(t),e}},{key:"isOnTheSameAxis",value:function(t){var e=this.plane.getPoint(t);console.log("confronto (x,".concat(this.center.x," y,").concat(this.center.y,"====x:").concat(this.vertex.x,",y:").concat(this.vertex.y,") +++++ (x:").concat(e.x,", y:").concat(e.y,")"));var n=(new MathDS.Vector2).subVectors(e,this.center).normalize(),s=n.negate();return console.log("this.distanceV.dot(differenceFromCenter)",this.distanceV.dot(n)),console.log("this.distanceV.dot(negativeDifferenceFromCenter)",this.distanceV.dot(s)),.995<=Math.abs(this.distanceV.dot(n))||.995<=Math.abs(this.distanceV.dot(s))}}]),s}(),express=require("express"),app=express(),bParser=require("body-parser"),fs=require("fs"),dataPath="./data/plane.json";fs.existsSync(dataPath)||fs.writeFileSync(dataPath,{}.toString(),{flag:"w"});var pointsForTest=JSON.parse(fs.readFileSync(dataPath,{encoding:"utf8",flag:"r"}));app.use(bParser.urlencoded({extended:!0})),app.use(bParser.json([]));var chars={};chars["{"]=encodeURIComponent("{"),chars["}"]=encodeURIComponent("}"),chars[","]=encodeURIComponent(","),chars['"']=encodeURIComponent('"'),chars[" "]=encodeURIComponent(" ");var pat={};pat.wSp="("+chars[" "]+")+",pat.wSs="("+chars[" "]+")*";var plane=new Plane;pointsForTest.map(function(t){plane.addPoint(t.x,t.y)});var router=express.Router();function errorHandler(t,e,n,s){n.status(500),n.json({error:t}),console.error(t),s()}router.use(function(t,e,n){n()}),router.get("/",function(t,e){e.json({"api/":""})}),router.route("/point".concat(chars[" "],"with").concat(chars[" "],"body").concat(chars[" "]).concat(chars["{"]).concat(chars[" "]).concat(chars['"'],"x").concat(chars['"'],"\\:").concat(chars[" "],":x,").concat(chars[" "]).concat(chars['"'],"y").concat(chars['"'],"\\:").concat(chars[" "],":y").concat(chars["}"])).post(function(t,e,n){var s=Number.parseFloat(t.params.x),o=Number.parseFloat(t.params.y);(Number.isNaN(s)||Number.isNaN(o))&&n(new Error(1)),plane.addPoint(s,o),e.json({msg:"Point has been added",x:s,y:o})}),router.route("/space").get(function(t,e){e.json({points:plane.getPoints()})}).delete(function(t,e){plane.deleteAll(),e.json({msg:"the space is empty now"})}),router.route("/lines/".concat(chars["{"],":num").concat(chars["}"])).get(function(t,e,n){var s=Number.parseInt(t.params.num);Number.isNaN(s)&&n(new Error(1)),console.log(plane.getLinesWithPoints(s)),e.json({line:plane.getLinesWithPoints(s)})}),router.route("/test").get(function(t,e){plane.test(),e.json({test:"look at terminal"})}),router.use(errorHandler),app.use("/api",router),app.listen(3e3);
//# sourceMappingURL=node_exercise.min.js.map